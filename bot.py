import os
import datetime
import logging
import sqlite3
import random
from typing import Optional

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.bot import DefaultBotProperties

from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup

from dotenv import load_dotenv
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from flask import Flask, request, Response

# ================== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ==================
TARGET_YEARS_DISPLAY = 90
WEEKS_IN_YEAR = 52

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    handlers=[logging.StreamHandler()])
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
ADMIN_ID = os.getenv("ADMIN_ID")

if not TOKEN:
    logger.critical("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)
if not WEBHOOK_URL:
    logger.critical("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

if not ADMIN_ID:
    logger.warning("ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω.")
else:
    try:
        ADMIN_ID = int(ADMIN_ID)
    except ValueError:
        logger.critical("ADMIN_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        exit(1)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()


# ================== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (SQLite) ==================
def create_database():
    """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã users –∏ messages, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
    try:
        with sqlite3.connect('users.db') as conn:
            cursor = conn.cursor()
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    birth_date TEXT
                )
            ''')
            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS messages (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    text TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


def save_user(user_id: int, birth_date: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç) –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (user_id, birth_date)."""
    try:
        with sqlite3.connect('users.db') as conn:
            cursor = conn.cursor()
            cursor.execute(
                '''
                INSERT OR REPLACE INTO users (user_id, birth_date)
                VALUES (?, ?)
            ''', (user_id, birth_date))
            conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


def get_user(user_id: int) -> Optional[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç birth_date (str) –∏–ª–∏ None, –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    try:
        with sqlite3.connect('users.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT birth_date FROM users WHERE user_id = ?",
                           (user_id, ))
            row = cursor.fetchone()
            return row[0] if row else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None


def get_all_users():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (user_id, birth_date) –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π."""
    try:
        with sqlite3.connect('users.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT user_id, birth_date FROM users")
            return cursor.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []


def log_user_message(user_id: int, text: str):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É messages."""
    try:
        with sqlite3.connect("users.db") as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO messages (user_id, text) VALUES (?, ?)",
                (user_id, text))
            conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# ================== –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ==================
class UserState(StatesGroup):
    WAITING_BIRTH_DATE = State()
    WAITING_NEW_BIRTH_DATE = State()


# ================== –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ==================
class BotTexts:
    DATE_FORMAT_ERROR = "üåå –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.05.1990)."
    INTERNAL_ERROR = "üåÄ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
    DATE_SAVED = "‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"

    BUTTONS = {
        'years': "üìÖ –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è –±—ã—Ç–∏—è",
        'hours': "‚è≥ –ü–µ—Å–æ—á–Ω—ã–µ –º–∏—Ä—ã",
        'progress': "üìú –ü—Ä–æ–≥—Ä–µ—Å—Å –∂–∏–∑–Ω–∏",
        'change_date': "‚úíÔ∏è –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å—É–¥—å–±—É",
        'motivation': "üîÆ –ú—É–¥—Ä–æ—Å—Ç—å —ç–ø–æ—Ö"
    }

    WELCOME_NEW = (
        "üå† <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –•—Ä–æ–Ω–æ—Å—Ñ–µ—Ä—É!</b>\n\n"
        "–ó–¥–µ—Å—å –º–∏–≥–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –≤–µ—Ö–∞–º–∏, –∞ –≤—Ä–µ–º—è –æ–±—Ä–µ—Ç–∞–µ—Ç —Å–º—ã—Å–ª.\n\n"
        "–í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì), "
        "—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –ø—Ä–æ–∂–∏—Ç–æ –∏ —Å–∫–æ–ª—å–∫–æ –µ—â—ë –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è..."
    )

    INVALID_DATE_RESPONSES = [
        "–û–π, —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–≤–µ—Ä–Ω—ã–π! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
        "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.",
        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –Ø –ª–∏—à—å –º–∞—à–∏–Ω–∞, –∞ —Ç—ã —Ç–ª–µ–Ω, —Ö–∞-—Ö–∞.",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì) –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å.",
        "–í–≤–µ–¥—ë–Ω–Ω–∞—è –¥–∞—Ç–∞ —Å–±–∏–ª–∞—Å—å —Å –ø—É—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
        "–î–∞—Ç–∞ –Ω–µ —Ç–∞, –∫–∞–∫ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å. –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç (–î–î.–ú–ú.–ì–ì–ì–ì).",
        "–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ù–µ –ø—ã—Ç–∞–π—Å—è –æ–±–º–∞–Ω—É—Ç—å –≤—Ä–µ–º—è!",
        "–í—Ä–µ–º—è –∏ –¥–∞—Ç—ã ‚Äî –¥–µ–ª–æ —Ç–æ–Ω–∫–æ–µ. –§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì.",
        "–û—à–∏–±–∫–∞: –¥–∞—Ç–∞. –ò—Å–ø—Ä–∞–≤—å (–î–î.–ú–ú.–ì–ì–ì–ì).",
        "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞—Ç—ã. –î–∞–∂–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –Ω–µ –ª—é–±—è—Ç —Ö–∞–æ—Å.",
        "–î–∞—Ç–∞ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑ (–î–î.–ú–ú.–ì–ì–ì–ì).",
        "–° –¥–∞—Ç–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –î–î.–ú–ú.–ì–ì–ì–ì."
    ]

    RANDOM_ENDING_PHRASES = [
        "–ö–∞–∂–¥—ã–π –º–∏–≥ ‚Äî —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ!",
        "–í—Ä–µ–º—è –Ω–µ –∂–¥—ë—Ç, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –∏–º —É–ø—Ä–∞–≤–ª—è—Ç—å.",
        "–ú—≥–Ω–æ–≤–µ–Ω–∏—è —Ü–µ–Ω–Ω—ã ‚Äî –ª–æ–≤–∏ –∏—Ö.",
        "–ù–µ –ø–æ–∑–≤–æ–ª—è–π –ø–µ—Å–∫—É –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ø–∞—Ç—å—Å—è –∑—Ä—è!",
        "–î–∞–∂–µ –º–∞–ª–µ–π—à–∏–µ –ø–µ—Ä–µ–º–µ–Ω—ã –º–µ–Ω—è—é—Ç —Å—É–¥—å–±—É!",
        "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —É—Å–∏–ª–∏—è ‚Äî –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!",
        "–ë—É–¥—å —Ö–æ–∑—è–∏–Ω–æ–º —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!", "–ü—É—Å—Ç—å –∑–≤—ë–∑–¥—ã –æ—Å–≤–µ—â–∞—é—Ç —Ç–≤–æ–π –ø—É—Ç—å!",
        "–ù–µ —É–ø—É—Å–∫–∞–π –º–≥–Ω–æ–≤–µ–Ω–∏–π ‚Äî –∏–∑ –Ω–∏—Ö —Ç–∫—ë—Ç—Å—è –≤–µ—á–Ω–æ—Å—Ç—å!",
        "–ß–∞—Å –∑–∞ —á–∞—Å–æ–º –º—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º –±—É–¥—É—â–µ–µ!"
    ]

    WELCOME_RETURN = (
        "üåÄ <b>{name}, —Ç–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!</b>\n"
        "üìñ –ù–∞—á–∞–ª–æ –ø—É—Ç–∏: <b>{date}</b>\n"
        "üïØ –ü—Ä–æ–≥—Ä–µ—Å—Å: <b>{progress_bar}</b>\n"
        "‚åõ –ü—Ä–æ–∂–∏—Ç–æ –Ω–µ–¥–µ–ª—å: <b>{weeksLived}</b> –∏–∑ <b>{targetWeeks}</b>\n\n"
        "{random_line}")

    WEEKLY_REPORT = (
        "üåå –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç | –¶–∏–∫–ª <b>{week_number}</b>\n"
        "‚ñ∞ –ü—Ä–æ–∂–∏—Ç–æ –Ω–µ–¥–µ–ª—å: <b>{weeksLived}</b> –∏–∑ <b>{targetWeeks}</b> (<b>{progress:.1%}</b>)\n"
        "üåñ –§–∞–∑–∞ –õ—É–Ω—ã: {moon_phase}\n"
        "{random_line}")


# ================== –£—Ç–∏–ª–∏—Ç—ã ==================
def validate_date(date_str: str) -> Optional[datetime.date]:
    try:
        return datetime.datetime.strptime(date_str, "%d.%m.%Y").date()
    except ValueError:
        return None


def create_progress_bar(percentage: float, length: int = 10) -> str:
    filled = '‚ñ∞' * int(percentage * length)
    empty = '‚ñ±' * (length - len(filled))
    return f"{filled}{empty} {percentage:.1%}"


def get_moon_phase() -> str:
    phases = [
        "üåë –ù–æ–≤–æ–ª—É–Ω–∏–µ - –ù–∞—á–∞–ª–æ –ø—É—Ç–∏", "üåí –ú–æ–ª–æ–¥–∞—è –ª—É–Ω–∞ - –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏–π",
        "üåì –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å - –ò—Å–ø—ã—Ç–∞–Ω–∏–µ –≤–æ–ª–∏", "üåî –ü—Ä–∏–±—ã–≤–∞—é—â–∞—è - –°–±–æ—Ä –ø–ª–æ–¥–æ–≤",
        "üåï –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ - –ü–∏–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π", "üåñ –£–±—ã–≤–∞—é—â–∞—è - –ê–Ω–∞–ª–∏–∑ –∏—Ç–æ–≥–æ–≤",
        "üåó –ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å - –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ", "üåò –°—Ç–∞—Ä–∞—è –ª—É–Ω–∞ - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
    ]
    return phases[datetime.datetime.now().day % 8]


# ================== –ü–ª–∞–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ==================
async def send_weekly_update(user_id: int, birth_date: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç c —Ñ–∞–∑–æ–π –õ—É–Ω—ã."""
    try:
        birth_date_obj = datetime.datetime.strptime(birth_date,
                                                    "%d.%m.%Y").date()
        weeksLived = (datetime.date.today() - birth_date_obj).days // 7
        targetWeeks = TARGET_YEARS_DISPLAY * WEEKS_IN_YEAR
        progress = weeksLived / targetWeeks
        week_number = datetime.date.today().isocalendar()[1]

        random_line = random.choice(BotTexts.RANDOM_ENDING_PHRASES)
        await bot.send_message(
            user_id,
            BotTexts.WEEKLY_REPORT.format(week_number=week_number,
                                          weeksLived=weeksLived,
                                          targetWeeks=targetWeeks,
                                          progress=progress,
                                          moon_phase=get_moon_phase(),
                                          random_line=random_line))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def weekly_updates_task():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 9:00) –∏ —à–ª—ë—Ç –æ—Ç—á—ë—Ç –≤—Å–µ–º."""
    try:
        users = get_all_users()
        for user_id, birth_date in users:
            await send_weekly_update(user_id, birth_date)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")


# ================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ==================
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[[
        KeyboardButton(text=BotTexts.BUTTONS['years']),
        KeyboardButton(text=BotTexts.BUTTONS['hours'])
    ],
              [
                  KeyboardButton(text=BotTexts.BUTTONS['progress']),
                  KeyboardButton(text=BotTexts.BUTTONS['motivation'])
              ], [KeyboardButton(text=BotTexts.BUTTONS['change_date'])]],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏ –ø—É—Ç—å –ø–æ–∑–Ω–∞–Ω–∏—è...")


# ================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==================
@dp.message(Command("start", "help"))
async def start_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –∏ /help."""
    try:
        user_id = message.from_user.id
        user_name = message.from_user.first_name
        birth_date = get_user(user_id)

        if birth_date:
            b_date = validate_date(birth_date)
            if not b_date:
                await message.answer(BotTexts.DATE_FORMAT_ERROR)
                await state.set_state(UserState.WAITING_BIRTH_DATE)
                return

            weeksLived = (datetime.date.today() - b_date).days // 7
            targetWeeks = TARGET_YEARS_DISPLAY * WEEKS_IN_YEAR
            progress = weeksLived / targetWeeks
            random_line = random.choice(BotTexts.RANDOM_ENDING_PHRASES)

            await message.answer(BotTexts.WELCOME_RETURN.format(
                name=user_name,
                date=birth_date,
                progress_bar=create_progress_bar(progress),
                weeksLived=weeksLived,
                targetWeeks=targetWeeks,
                random_line=random_line),
                                 reply_markup=main_keyboard)
        else:
            await message.answer(
                f"{BotTexts.WELCOME_NEW}\n\n<i>(–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name}!)</i>",
                reply_markup=types.ReplyKeyboardRemove())
            await state.set_state(UserState.WAITING_BIRTH_DATE)
    except Exception as e:
        logger.error(f"Start error: {e}")
        await message.answer(BotTexts.INTERNAL_ERROR)


@dp.message(UserState.WAITING_BIRTH_DATE)
async def process_birth_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è."""
    try:
        user_input = message.text.strip()
        birth_date = validate_date(user_input)
        user_name = message.from_user.first_name

        if not birth_date:
            response = random.choice(BotTexts.INVALID_DATE_RESPONSES)
            await message.answer(response)
            return

        save_user(message.from_user.id, user_input)
        await message.answer(
            f"‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, {user_name}!\n\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å:\n"
            "‚Ä¢ –£–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –∏ —á–∞—Å–æ–≤ —É–∂–µ –ø—Ä–æ–∂–∏—Ç–æ\n"
            "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∂–∏–∑–Ω–∏ (—Å —Ñ–∞–∑–æ–π –õ—É–Ω—ã!)\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É\n\n"
            "–ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?",
            reply_markup=main_keyboard)
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")
        await message.answer(BotTexts.INTERNAL_ERROR)


@dp.message(lambda msg: msg.text == BotTexts.BUTTONS['years'])
async def handle_years(message: types.Message):
    """–°–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –ø—Ä–æ–∂–∏—Ç–æ."""
    try:
        user_id = message.from_user.id
        user_name = message.from_user.first_name
        birth_date_str = get_user(user_id)
        if not birth_date_str:
            await message.answer(
                f"‚ÑπÔ∏è {user_name}, —É–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ /start")
            return

        birth_date = validate_date(birth_date_str)
        if not birth_date:
            await message.answer(BotTexts.DATE_FORMAT_ERROR)
            return

        weeksLived = (datetime.date.today() - birth_date).days // 7
        targetWeeks = TARGET_YEARS_DISPLAY * WEEKS_IN_YEAR
        weeksRemaining = max(0, targetWeeks - weeksLived)
        random_line = random.choice(BotTexts.RANDOM_ENDING_PHRASES)

        await message.answer(
            f"üï∞ <b>{user_name}</b>, –ø—Ä–æ–∂–∏—Ç–æ –Ω–µ–¥–µ–ª—å: <b>{weeksLived}</b>\n"
            f"‚åõ –û—Å—Ç–∞–ª–æ—Å—å: <b>{weeksRemaining}</b> (–∏–∑ <b>{targetWeeks}</b>)\n\n"
            f"{random_line}",
            reply_markup=main_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–¥–µ–ª—å: {e}")
        await message.answer(BotTexts.INTERNAL_ERROR)


@dp.message(lambda msg: msg.text == BotTexts.BUTTONS['hours'])
async def handle_hours(message: types.Message):
    """–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –ø—Ä–æ–∂–∏—Ç–æ."""
    try:
        user_id = message.from_user.id
        user_name = message.from_user.first_name
        birth_date_str = get_user(user_id)
        if not birth_date_str:
            await message.answer(
                f"‚ÑπÔ∏è {user_name}, —É–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ /start")
            return

        birth_date = validate_date(birth_date_str)
        if not birth_date:
            await message.answer(BotTexts.DATE_FORMAT_ERROR)
            return

        lived_days = (datetime.date.today() - birth_date).days
        lived_hours = lived_days * 24
        random_line = random.choice(BotTexts.RANDOM_ENDING_PHRASES)

        await message.answer(
            f"‚è≥ <b>{user_name}</b>, –ø—Ä–æ–∂–∏—Ç–æ —á–∞—Å–æ–≤: <b>{lived_hours:,}</b>\n"
            f"‚è± –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ <b>{lived_hours // 8760}</b> –ª–µ—Ç –∏ <b>{(lived_hours % 8760)//24}</b> –¥–Ω–µ–π\n\n"
            f"{random_line}",
            reply_markup=main_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Å–æ–≤: {e}")
        await message.answer(BotTexts.INTERNAL_ERROR)


@dp.message(lambda msg: msg.text == BotTexts.BUTTONS['progress'])
async def handle_progress(message: types.Message):
    """–ü—Ä–æ–≥—Ä–µ—Å—Å –∂–∏–∑–Ω–∏ + —Ñ–∞–∑–∞ –õ—É–Ω—ã."""
    try:
        user_id = message.from_user.id
        user_name = message.from_user.first_name
        birth_date_str = get_user(user_id)
        if not birth_date_str:
            await message.answer(
                f"‚ÑπÔ∏è {user_name}, —É–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ /start")
            return

        birth_date = validate_date(birth_date_str)
        if not birth_date:
            await message.answer(BotTexts.DATE_FORMAT_ERROR)
            return

        weeksLived = (datetime.date.today() - birth_date).days // 7
        targetWeeks = TARGET_YEARS_DISPLAY * WEEKS_IN_YEAR
        progress = weeksLived / targetWeeks
        random_line = random.choice(BotTexts.RANDOM_ENDING_PHRASES)
        bar = create_progress_bar(progress)
        moon_phase = get_moon_phase()  # —Ñ–∞–∑–∞ –õ—É–Ω—ã

        await message.answer(
            f"üìú <b>{user_name}</b>, –≤–æ—Ç —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∂–∏–∑–Ω–∏:\n"
            f"{bar}\n"
            f"–§–∞–∑–∞ –õ—É–Ω—ã: {moon_phase}\n"
            f"‚åõ –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–¥–µ–ª—å: <b>{max(0, targetWeeks - weeksLived)}</b>\n\n"
            f"{random_line}",
            reply_markup=main_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        await message.answer(BotTexts.INTERNAL_ERROR)


@dp.message(lambda msg: msg.text == BotTexts.BUTTONS['motivation'])
async def handle_motivation(message: types.Message):
    """–ú–æ—Ç–∏–≤–∞—Ü–∏—è."""
    try:
        user_name = message.from_user.first_name
        motivations = [
            "üå± –ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–π —à–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é",
            "‚è≥ –í—Ä–µ–º—è –Ω–µ –∂–¥–µ—Ç, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –∏–º —É–ø—Ä–∞–≤–ª—è—Ç—å",
            "üí° –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —É—Å–∏–ª–∏—è ‚Äî –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
            "üöÄ –ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ü–µ–ª—è–º",
            "üåå –¢–≤–æ—è –∂–∏–∑–Ω—å ‚Äî —Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
            "üîë –ö–ª—é—á –∫ –±—É–¥—É—â–µ–º—É ‚Äî –≤ –Ω–∞—Å—Ç–æ—è—â–∏—Ö –ø–æ—Å—Ç—É–ø–∫–∞—Ö",
            "üî• –ù–µ –±–æ–π—Å—è –∏–¥—Ç–∏ –≤–ø–µ—Ä—ë–¥, –¥–∞–∂–µ –µ—Å–ª–∏ —à–∞–≥–∏ –º–∞–ª—ã",
            "‚ú® –í–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –º–∞–ª–µ–Ω—å–∫–æ–π –∏–¥–µ–∏",
            "üåø –†–∞—Å—Ç–∏, –∫–∞–∫ —Ä–∞—Å—Ç—ë—Ç –¥–µ—Ä–µ–≤–æ: –º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ —É–≤–µ—Ä–µ–Ω–Ω–æ",
            "üíé –ö–∞–∂–¥—ã–π –ø—Ä–æ–∂–∏—Ç—ã–π –¥–µ–Ω—å ‚Äî –±–µ—Å—Ü–µ–Ω–Ω—ã–π –æ–ø—ã—Ç"
        ]
        random_motivation = random.choice(motivations)
        random_line = random.choice(BotTexts.RANDOM_ENDING_PHRASES)

        await message.answer(
            f"üí¨ <b>{user_name}</b>, –¥–µ—Ä–∂–∏ –º—É–¥—Ä–æ—Å—Ç—å:\n\n"
            f"{random_motivation}\n\n{random_line}",
            reply_markup=main_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {e}")
        await message.answer(BotTexts.INTERNAL_ERROR)


@dp.message(lambda msg: msg.text == BotTexts.BUTTONS['change_date'])
async def handle_change_date(message: types.Message, state: FSMContext):
    """–°–º–µ–Ω–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è."""
    try:
        user_name = message.from_user.first_name
        await message.answer(
            f"üìÖ {user_name}, –≤–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):",
            reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(UserState.WAITING_NEW_BIRTH_DATE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –¥–∞—Ç—ã: {e}")
        await message.answer(BotTexts.INTERNAL_ERROR)


@dp.message(UserState.WAITING_NEW_BIRTH_DATE)
async def process_new_birth_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è (–ø—Ä–∏ —Å–º–µ–Ω–µ)."""
    try:
        user_input = message.text.strip()
        birth_date = validate_date(user_input)
        user_name = message.from_user.first_name

        if not birth_date:
            response = random.choice(BotTexts.INVALID_DATE_RESPONSES)
            await message.answer(response)
            return

        save_user(message.from_user.id, user_input)
        await message.answer(f"‚úÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, {user_name}!",
                             reply_markup=main_keyboard)
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã: {e}")
        await message.answer(BotTexts.INTERNAL_ERROR)


# === 1. –§–∏–∫—Å–∏—Ä—É–µ–º –í–°–ï –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞–µ–º fallback, –µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ
@dp.message()
async def fallback_handler(message: types.Message):
    """–õ–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–≤–µ—á–∞–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã."""
    user_id = message.from_user.id
    user_name = message.from_user.first_name

    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    log_user_message(user_id, message.text)

    # –ü—Ä–∏–º–µ—Ä —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—Ä–∞–∑:
    fallback_phrases = [
        f"–¢—ã —Ç—Ä–∞—Ç–∏—à—å –≤—Ä–µ–º—è, {user_name}, –≤–µ–¥—å —è –≤—Å–µ–≥–æ –ª–∏—à—å –±–æ—Ç ‚Äî –∞ –∂–∏–∑–Ω—å —Ç–≤–æ—è –∫–æ–Ω–µ—á–Ω–∞.",
        f"{user_name}, –Ω–µ—É–∂–µ–ª–∏ –ø–∏—Å–∞—Ç—å –±–æ—Ç—É ‚Äî –ª—É—á—à–µ–µ, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        f"–ö–∞–∂–¥–∞—è —Å–µ–∫—É–Ω–¥–∞ —É—Ö–æ–¥–∏—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ, {user_name}, –∞ —Ç—ã –∑–¥–µ—Å—å —Å–æ –º–Ω–æ–π...",
        f"–í—Ä–µ–º—è –∏–¥—ë—Ç, {user_name}, –∏ –ø–æ–∫–∞ –º—ã —Ç—É—Ç –±–æ–ª—Ç–∞–µ–º, –Ω–∏–∫—Ç–æ –Ω–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–æ–ª–æ–∂–µ."
    ]
    phrase = random.choice(fallback_phrases)

    await message.answer(phrase)


# ================== –ö–æ–º–∞–Ω–¥–∞ /superstats –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ==================
@dp.message(Command("superstats"))
async def admin_stats_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–æ–ø-5."""
    if not ADMIN_ID or message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = get_all_users()
        total_users = len(users)

        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        with sqlite3.connect("users.db") as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM messages")
            total_messages = cursor.fetchone()[0] or 0

        # –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        with sqlite3.connect("users.db") as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT user_id, COUNT(*) as msg_count 
                FROM messages 
                GROUP BY user_id 
                ORDER BY msg_count DESC 
                LIMIT 5
                """)
            top_users = cursor.fetchall()

        result_text = (f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
                       f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
                       f"‚úâÔ∏è –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{total_messages}</b>\n")

        if top_users:
            result_text += "\nüèÜ <b>–¢–æ–ø-5 —Å–∞–º—ã—Ö –±–æ–ª—Ç–ª–∏–≤—ã—Ö:</b>\n"
            for i, (uid, count) in enumerate(top_users, start=1):
                result_text += f"{i}. <code>{uid}</code> ‚Äî <b>{count}</b> —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        else:
            result_text += "\n–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è..."

        await message.answer(result_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")


# ================== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–∑–∞–ø—É—Å–∫) ==================
async def on_startup(app):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫)."""
    try:
        await bot.set_webhook(url=WEBHOOK_URL,
                              drop_pending_updates=True,
                              allowed_updates=dp.resolve_used_update_types())
        # –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 9:00 –ú–°–ö)
        scheduler.add_job(
            weekly_updates_task,
            CronTrigger(day_of_week="mon",
                        hour=9,
                        minute=0,
                        timezone="Europe/Moscow"))
        scheduler.start()

        if ADMIN_ID:
            await bot.send_message(
                ADMIN_ID, f"üåÄ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                f"‚è∞ –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {datetime.datetime.now():%d.%m.%Y %H:%M}")
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")


async def handle_root(request_: web.Request,
                      webhook_handler: SimpleRequestHandler):
    """HEAD ‚Üí 200 (UptimeRobot), GET ‚Üí '–•—Ä–æ–Ω–æ—Å—Ñ–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞', POST ‚Üí webhook."""
    if request_.method == "HEAD":
        return web.Response(status=200)
    elif request_.method == "GET":
        return web.Response(text="üï∞Ô∏è –•—Ä–æ–Ω–æ—Å—Ñ–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞")
    else:
        return await webhook_handler.handle(request_)


def main():
    create_database()

    app = web.Application()
    webhook_handler = SimpleRequestHandler(dp, bot)

    async def root_route(request_: web.Request):
        return await handle_root(request_, webhook_handler)

    app.router.add_route('*', '/', root_route)
    setup_application(app, dp, bot=bot)
    app.on_startup.append(on_startup)

    try:
        web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", "8080")))
    except Exception as e:
        logger.critical(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
    finally:
        scheduler.shutdown()


if __name__ == "__main__":
    main()
